name: Lighthouse CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Start application
      run: |
        npm run start &
        sleep 10
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Lighthouse CI Audit
      run: npm run audit:lighthouse:ci
      env:
        LIGHTHOUSE_URL: http://localhost:3000
        CI: true

    - name: Upload Lighthouse Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: lighthouse-reports/
        retention-days: 30

    - name: Comment PR with Lighthouse Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const reportsDir = path.join(process.cwd(), 'lighthouse-reports');
          const files = fs.readdirSync(reportsDir);
          const ciReport = files.find(f => f.startsWith('lighthouse-ci-'));

          if (ciReport) {
            const reportData = JSON.parse(fs.readFileSync(path.join(reportsDir, ciReport), 'utf8'));

            let comment = '## 🔍 Lighthouse CI Results\n\n';
            comment += `| URL | Performance | Accessibility | Best Practices | SEO | Status |\n`;
            comment += `|-----|-------------|---------------|----------------|-----|--------|\n`;

            reportData.results.forEach(result => {
              const status = result.passed ? '✅ PASS' : '❌ FAIL';
              const url = result.url.replace('http://localhost:3000', '');
              comment += `| ${url || '/'} | ${result.scores.performance} | ${result.scores.accessibility} | ${result.scores.bestPractices} | ${result.scores.seo} | ${status} |\n`;
            });

            if (reportData.summary.totalFailures > 0) {
              comment += '\n### ⚠️ Issues Found\n';
              reportData.results.forEach(result => {
                if (result.failures.length > 0) {
                  comment += `\n**${result.url}:**\n`;
                  result.failures.forEach(failure => {
                    comment += `- ${failure}\n`;
                  });
                }
              });
            }

            comment += '\n---\n*Lighthouse thresholds: Performance ≥85, Accessibility ≥95, Best Practices ≥90, SEO ≥90*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  accessibility-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Start application
      run: |
        npm run start &
        sleep 10
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Accessibility Check
      run: npm run accessibility:check

    - name: Upload Accessibility Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-reports
        path: lighthouse-reports/accessibility-*.json
        retention-days: 30